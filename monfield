#!/bin/bash

# NAME: Monfield
#
# DESCRIPTION: monfield is a tool for automating the update of a specific
# field in specific record. The fields to query by and to update are read
# from a CSV file, and the updates are written to a JavaScript file, that
# gets executed on a remote mongo instance.
#
# AUTHOR: Mohammad Matini <mohammad.matini@outlook.com>
# COPYRIGHT: Workiom Inc. (2020)
# LICENSE: GPLv3
#

set -o errexit -o pipefail -o noclobber
shopt -s inherit_errexit

cat <<EOF

================================================================================

                   ┏┳┓┏━┓┏┓╻┏━╸╻┏━╸╻  ╺┳┓   ┏┳┓╻┏━╸┏━┓┏━┓╺┳╸┏━╸
                   ┃┃┃┃ ┃┃┗┫┣╸ ┃┣╸ ┃   ┃┃   ┃┃┃┃┃╺┓┣┳┛┣━┫ ┃ ┣╸
                   ╹ ╹┗━┛╹ ╹╹  ╹┗━╸┗━╸╺┻┛   ╹ ╹╹┗━┛╹┗╸╹ ╹ ╹ ┗━╸

                           Mongodb Field Migration Tool

            AUTHOR:     Mohammad Matini <mohammad.matini@outlook.com>
            MAINTAINER: Mohammad Matini <mohammad.matini@outlook.com>
            COPYRIGHT:  Workiom Inc. (2020)

================================================================================

EOF

function print_usage () {
    cat <<EOF

    USAGE:

        monfield [REQUIRED-ARGUMENTS] [OPTIONS]


    DESCRIPTION:

        monfield is a tool for automating the update of a specific field in
        specific record. The fields to query by and to update are read from
        a CSV file, and the updates are written to a JavaScript file, that
        gets executed on a remote mongo instance.


    REQUIRED ARGUMENTS:

        --hostname ................ URL for the database, as host:port
        --authentication-database . authentication database
        --username ................ username to authenticate as
        --database-name ........... database in which the migration will run
        --collection-name ......... collection in which the migration will run
        --migration-file .......... CSV file that contains the field definitions
        --delimiter ............... Delimiting character of the input CSV file.
                                    Will be inferred if not provided.
        --quotechar ............... Character used to quote strings in the
                                    input CSV file.  Will be inferred if not
                                    provided.
        --output-js-folder ........ path where the JS batch scripts will be
                                    created. The scripts will be executed at
                                    the end if --dryrun was not supplied.
                                    The folder must not exist, as it will be
                                    created by this script.


    OPTIONS:

        -h, --help ................ print this help message
        --dryrun .................. print the mongo scripting calls instead
                                    of executing them
        --query-value-constructor . constructor name to be called on every
                                    query value, e.g. passing ObjectId will
                                    call ObjectId("query-value") on query
                                    values (Not passing this option means
                                    that all query values are passed
                                    literally)
        --update-value-constructor  constructor name to be called on every
                                    update value e.g. passing ISODate will
                                    call ISODate("update-value") on update
                                    values (Not passing this option means
                                    that all query values are passed
                                    literally)


    MIGRATION FILE:

        The migration file is a CSV file which is structured as follows:

            query-field,update-field
            query-value,update-value
            query-value,update-value
            query-value,update-value
            ...

        For each row containing a [query-value]-[update-value] pair, an
        update is executed; we find records where [query-field] is
        [query-value] and set their [update-field] to [update-value].

EOF
}

function check_arguments () {
    if [ -z "$1" ]; then
        echo "    ERROR! Missing database hostname! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$2" ]; then
        echo "    ERROR! Missing authentication database name! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$3" ]; then
        echo "    ERROR! Missing username! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$4" ]; then
        echo "    ERROR! Missing database name! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$5" ]; then
        echo "    ERROR: Missing collection name! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$6" ]; then
        echo "    ERROR: Missing migration file path! Aborting!"
        print_usage
        exit 1
    fi

    if [ ! -r "$6" ]; then
        echo "    ERROR: Migration file does not exist or unreadable! Aborting!"
        print_usage
        exit 1
    fi

    if [ -z "$7" ]; then
        echo "    ERROR: Missing output JS folder path! Aborting!"
        print_usage
        exit 1
    fi

    if [ -d "$7" ]; then
        echo
        echo "  ERROR: folder ($output_js_folder) already exists."
        echo "  Please delete the folder, or specify a new path."
        print_usage
        exit 1
    fi
}

function get_database_password () {
    read -r -p "  Enter database password: " -s password
    echo -n "$password"
}

function confirm_operation () {
    echo
    echo "  !!!! WARNING !!!! THIS OPERATION CAN NOT BE REVERSED"
    echo
    read -r -p "  Are you sure you want to continue? [y/n]: " -n 1 -r
    echo
    echo

    if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
        echo "    Operation cancled. Aborting..."
        echo
        exit 0
    fi
}

function check_requirements () {
    missing_command=$({
         [ -x "$(command -v csvcut)" ] || echo csvcut;
         [ -x "$(command -v csvsql)" ] || echo csvsql;
         [ -x "$(command -v csvjson)" ] || echo csvjson;
         [ -x "$(command -v mongo)" ] || echo mongo;
     } | tr '\n' ' ' )

    if [ -n "$missing_command" ]; then
        echo
        echo "    ERROR: Missing required executables: $missing_command"
        echo "           Please make sure you have csvkit and"
        echo "           mongo shell installed correctly."
        echo
        exit 1
    fi
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help) print_usage; exit 0 ;;
        --hostname) hostname="$2"; shift; shift ;;
        --authentication-database) auth_database_name="$2"; shift; shift ;;
        --username) username="$2"; shift; shift ;;
        --database-name) database_name="$2"; shift; shift ;;
        --collection-name) collection_name="$2"; shift; shift ;;
        --migration-file) migration_file="$2"; shift; shift ;;
        --delimiter) delimiter="$2"; shift; shift ;;
        --quotechar) quotechar="$2"; shift; shift ;;
        --query-value-constructor) query_value_constructor="$2"; shift; shift ;;
        --update-value-constructor) update_value_constructor="$2"; shift; shift ;;
        --output-js-folder) output_js_folder="$2"; shift; shift ;;
        --dryrun) dryrun=1; shift ;;
        *) echo "Unknown parameter: $1"; print_usage; exit 1 ;;
    esac
done

if [[ -n $delimiter ]]; then
        quote_and_delimiter_options+="--delimiter $delimiter "
fi

if [[ -n $quotechar ]]; then
        quote_and_delimiter_options+="--quotechar $quotechar "
fi

check_requirements
check_arguments "$hostname" "$auth_database_name" "$username" \
                "$database_name" "$collection_name" \
                "$migration_file" "$output_js_folder"

if [ -z $dryrun ]; then
    password=$(get_database_password)
else
    password="password-placeholder"
fi

# It's okay to use | head | here to make parsing faster because mongo keys
# can never be multi-line in the first place. If the header of the CSV file
# has multiple lines, then it's already not supported on mongo's side. We
# also have to temporarily disable pipefail when using head.
set +o pipefail
query_field=$(csvcut $quote_and_delimiter_options -c 1 "$migration_file" | head | \
        csvsql $quote_and_delimiter_options --query "select * from stdin limit 0;")
update_field=$(csvcut $quote_and_delimiter_options -c 2 "$migration_file" | head | \
        csvsql $quote_and_delimiter_options --query "select * from stdin limit 0;")
set -o pipefail

cat <<EOF


    HOSTNAME:        "$hostname"
    AUTH DATABASE:   "$auth_database_name"
    USERNAME:        "$username"

    DATABASE NAME:   "$database_name"
    COLLECTION NAME: "$collection_name"
    MIGRATION FILE:  "$migration_file"

    QUERY FIELD:    "$query_field"
    UPDATE FIELD:   "$update_field"

EOF

if [[ -n $query_value_constructor ]]; then
    echo "    Query Value Constructor:   $query_value_constructor"
fi

if [[ -n $update_value_constructor ]]; then
    echo "    Update Value Constructor:  $update_value_constructor"
fi

echo

if [ -z $dryrun ]; then
    confirm_operation
fi

mkdir -p "$output_js_folder"

csvjson --snifflimit 0 $quote_and_delimiter_options "$migration_file" \
        >> "$output_js_folder/batch.js"

echo
echo

update_loop="

let collection = db.getCollection('$collection_name')
for (let i = 0; i < data.length; i++) {
    if (data[i]['$query_field'] === null ||
        data[i]['$query_field'] === '' ||
        data[i]['$query_field'] === undefined) {
        print('WARNING: empty query value found! ignoring...')
        continue
    }

    let update = collection.update(
        { '$query_field': { \$eq: $query_value_constructor(data[i]['$query_field']) } },
        { \$set: { '$update_field': $update_value_constructor(data[i]['$update_field']) } },
        { multi: true }
    );

    if (update.nMatched !== 1) {
        print(update.nMatched + ' matches found for: ' +
              JSON.stringify(data[i]['$query_field']));
    }
}"

sed -i '1s;^;let data = ;' "$output_js_folder/batch.js"
echo "$update_loop" >> "$output_js_folder/batch.js"

command="
mongo -u $username -p $password $hostname/$database_name \
--authenticationDatabase $auth_database_name \
--eval 'load(\"$output_js_folder/batch.js\")'"

echo ================================================================
echo
echo "    Executing Batch File: $output_js_folder/batch.js"
echo
if [ -z $dryrun ];
then eval "$command"
else echo "$command"
fi
echo

echo
echo ================================================================
echo
echo "    Yay! Success!"
echo
